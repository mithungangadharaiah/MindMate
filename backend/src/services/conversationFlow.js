/**
 * Conversation Flow Service
 * Manages interactive Q&A sessions with AI-powered contextual follow-up questions
 */

const logger = require('../utils/logger');

class ConversationFlowService {
  constructor() {
    // Initial opening questions
    this.initialQuestions = [
      "Hi! I'm Hrudhi, your MindMate companion. How are you feeling right now?",
      "Hello! Tell me, what's been on your mind today?",
      "Hey there! What's one thing that happened today you'd like to share?",
      "Hi! How would you describe your emotional state right now?",
      "Hello! What's the strongest feeling you've experienced today?"
    ];

    // Closing questions (asked at the end)
    this.closingQuestions = [
      "Before we finish, is there anything else you'd like to share?",
      "We're almost done. What's one thing you're taking away from our conversation?",
      "One last thing - what do you need most right now?",
      "To wrap up, how are you feeling after talking this through?",
      "Finally, what would make the rest of your day better?"
    ];
  }

  /**
   * Get the initial question to start the conversation
   */
  getInitialQuestion() {
    return this.initialQuestions[Math.floor(Math.random() * this.initialQuestions.length)];
  }

  /**
   * ðŸ”¥ AI-POWERED: Generate contextual follow-up using Gemini AI
   * Analyzes the full conversation history to ask relevant, empathetic questions
   */
  async generateAIFollowUp(qaHistory, currentEmotion, isLastQuestion = false) {
    try {
      const apiKey = process.env.GEMINI_API_KEY;
      if (!apiKey) {
        logger.warn('No Gemini API key, falling back to template questions');
        return this.getFallbackQuestion(currentEmotion, qaHistory.length + 1, isLastQuestion);
      }

      const model = process.env.GEMINI_MODEL || 'gemini-2.0-flash-exp';

      // Build conversation context
      const conversationContext = qaHistory.map((qa, i) => 
        `Q${i + 1}: ${qa.question}\nA${i + 1}: ${qa.answer} [Emotion detected: ${qa.emotion}]`
      ).join('\n\n');

      // Different prompt for last question (closing)
      const prompt = isLastQuestion ? 
        `You are Hrudhi, an empathetic AI mental health companion wrapping up a conversation.

CONVERSATION SO FAR:
${conversationContext}

CURRENT EMOTION: ${currentEmotion}

Generate ONE thoughtful closing question that:
1. Helps them reflect on the conversation
2. Offers them a path forward or action
3. Shows care and support
4. Maximum 20 words
5. Feels like a warm goodbye with direction

Closing question:` 
        :
        `You are Hrudhi, an empathetic AI mental health companion. You're having a conversation with someone to understand their emotional state.

CONVERSATION SO FAR:
${conversationContext}

CURRENT EMOTION DETECTED: ${currentEmotion}

Based on this conversation, generate ONE thoughtful follow-up question that:
1. Shows you've been listening and understanding their situation
2. Digs deeper into what they've shared (work stress, relationships, specific concerns)
3. Is warm, empathetic, and non-judgmental
4. Helps them explore their feelings further
5. Is naturally conversational (like talking to a caring friend)
6. References specific things they mentioned (names, situations, feelings)

IMPORTANT RULES:
- Maximum 20 words
- ONE question only
- No generic questions - make it specific to what they said
- Don't repeat topics already covered unless going deeper
- Be direct and personal, not clinical
- Use "you" and their actual words when possible

Question:`;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            contents: [{
              parts: [{ text: prompt }]
            }]
          })
        }
      );

      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Gemini API error: ${error}`);
      }

      const data = await response.json();
      const aiQuestion = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

      if (aiQuestion) {
        logger.info(`âœ… AI-generated ${isLastQuestion ? 'closing' : 'follow-up'} question: ${aiQuestion}`);
        return aiQuestion;
      }

      throw new Error('No question generated by AI');

    } catch (error) {
      logger.error('Failed to generate AI question, using fallback:', error.message);
      return this.getFallbackQuestion(currentEmotion, qaHistory.length + 1, isLastQuestion);
    }
  }

  /**
   * Fallback to template questions if AI fails
   */
  getFallbackQuestion(emotion, questionNumber, isLastQuestion = false) {
    // For the last question, use closing questions
    if (isLastQuestion || questionNumber >= 5) {
      return this.closingQuestions[Math.floor(Math.random() * this.closingQuestions.length)];
    }

    // Emotion-based fallback questions
    const fallbackQuestions = {
      happy: [
        "That's wonderful! What specifically made you feel this way?",
        "I'm glad to hear that! Who or what contributed to this positive feeling?",
        "That sounds great! How long have you been feeling this good?"
      ],
      sad: [
        "I hear you. Can you tell me more about what's making you feel this way?",
        "That sounds tough. Is there something specific that triggered these feelings?",
        "Thank you for sharing. What do you think might help you feel better?"
      ],
      anxious: [
        "I can sense your concern. What's worrying you the most right now?",
        "That sounds stressful. When does this anxiety feel the strongest?",
        "Thank you for opening up. What helps you calm down when you feel anxious?"
      ],
      calm: [
        "That's peaceful. What helps you maintain this sense of calm?",
        "I'm glad you're feeling balanced. What contributed to this calmness?",
        "Wonderful. How do you want to spend the rest of your day feeling like this?"
      ],
      confused: [
        "I understand. What's making you feel uncertain right now?",
        "That's okay. What would help bring more clarity to your situation?",
        "Let's explore that. What's the main thing you're trying to figure out?"
      ],
      neutral: [
        "I see. Can you tell me more about your day so far?",
        "Okay. Is there anything you're looking forward to or concerned about?",
        "Thanks for sharing. What's been occupying your thoughts lately?"
      ]
    };

    const questions = fallbackQuestions[emotion] || [
      "Tell me more about that. What else is happening?",
      "That's interesting. How does this make you feel?",
      "I hear you. What's important about this to you?"
    ];

    return questions[questionNumber % questions.length];
  }

  /**
   * Build a conversation summary from Q&A pairs
   */
  summarizeConversation(qaHistory) {
    const emotions = qaHistory.map(qa => qa.emotion);
    const responses = qaHistory.map(qa => qa.answer);
    
    // Dominant emotion
    const emotionCounts = {};
    emotions.forEach(emotion => {
      emotionCounts[emotion] = (emotionCounts[emotion] || 0) + 1;
    });
    
    const dominantEmotion = Object.entries(emotionCounts)
      .sort((a, b) => b[1] - a[1])[0][0];

    // Average confidence
    const avgConfidence = qaHistory.reduce((sum, qa) => sum + (qa.confidence || 0), 0) / qaHistory.length;

    // Combined transcript
    const fullTranscript = responses.join(' ');

    return {
      dominantEmotion,
      emotionCounts,
      avgConfidence,
      fullTranscript,
      qaCount: qaHistory.length,
      emotionalJourney: emotions
    };
  }
}

module.exports = new ConversationFlowService();
